name: Run tests, create image and push to GitHub repository

on:
  push:
    # Publish `main` as Docker `latest` image.
    branches:
      - main

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: loadtest_api

jobs:

  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Run tests
        run: |
          if [ -f server/docker-compose.test.yml ]; then
            docker-compose --file server/docker-compose.test.yml build
            docker-compose --file server/docker-compose.test.yml run sut
            # stop the build if there are Python syntax errors or undefined names
            docker-compose --file server/docker-compose.test.yml run sut bash -c "flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics"
          else
            docker build server --file server/Dockerfile --tag $IMAGE_NAME
          fi

      # - name: Log into Github Repository
      #   run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      # - name: Push image to Github
      #   run: |
      #     IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

      #     # Change all uppercase to lowercase
      #     IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

      #     # Strip git ref prefix from version
      #     VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

      #     # Strip "v" prefix from tag name
      #     [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

      #     # Use Docker `latest` tag convention
      #     [ "$VERSION" == "main" ] && VERSION=latest

      #     echo IMAGE_ID=$IMAGE_ID
      #     echo VERSION=$VERSION

      #     docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
      #     docker push $IMAGE_ID:$VERSION

      - name: Log into Dockerhub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login https://index.docker.io/v1/ -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Push image to Dockerhub
        run: |
          IMAGE_ID=${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

  debug:
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v') # if it contains a tag, deploy
    steps:
      - name: Trigger deployment workflow. Need to pass image tag so we know wtf to deploy in K8s
        run: |
          curl -X POST 'https://api.github.com/repos/pablosr11/load_test/dispatches' \
            -H 'Authorization: ${{ secrets.GH_API_TOKEN }}' \
            -d '{"event_type" : "deployment", "client_payload": {"ref":"${{ github.ref }}","sha": "${{ github.sha }}"}}'

      - run: exit 1
